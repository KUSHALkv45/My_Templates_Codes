class DS {
public:
    vector<int> parent, size;
    
    DS(int n) {
        parent.resize(n);
        size.assign(n, 1);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int findP(int ver) {
        if (parent[ver] == ver) return ver;
        return parent[ver] = findP(parent[ver]); 
    }
    
    void unionE(int v1, int v2) {
        int uv1 = findP(v1);
        int uv2 = findP(v2);
        
        if (uv1 == uv2) {
              continue;
              //eCount[uv1]++;
        } else {
            if (size[uv1] > size[uv2]) {
                parent[uv2] = uv1;
                size[uv1] += size[uv2];
                //eCount[uv1] += eCount[uv2] + 1;
            } else {
                parent[uv1] = uv2;
                size[uv2] += size[uv1];
                //eCount[uv2] += eCount[uv1] + 1;
            }
        }
    }
    
 
};

class Solution {
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        DS ds(n);
        for (const auto& edge : edges) {
            ds.unionE(edge[0], edge[1]);
        }
        return ds.req();
    }
};


<------------------------------------------------------------------------------------------------------------------------------------------------------------------>

class DS {
public:
    vector<int> parent, size, eCount;
    
    DS(int n) {
        parent.resize(n);
        size.assign(n, 1);
        eCount.assign(n, 0);
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }
    
    int findP(int ver) {
        if (parent[ver] == ver) return ver;
        return parent[ver] = findP(parent[ver]); 
    }
    
    void unionE(int v1, int v2) {
        int uv1 = findP(v1);
        int uv2 = findP(v2);
        
        if (uv1 == uv2) {
            eCount[uv1]++;
        } else {
            if (size[uv1] > size[uv2]) {
                parent[uv2] = uv1;
                size[uv1] += size[uv2];
                eCount[uv1] += eCount[uv2] + 1;
            } else {
                parent[uv1] = uv2;
                size[uv2] += size[uv1];
                eCount[uv2] += eCount[uv1] + 1;
            }
        }
    }
    
    int req() {
        vector<bool> set(parent.size());
        int totalCount = 0;
        
        for (int i = 0; i < parent.size(); i++) {
            int root = findP(i);
            if (!set[root]) {
                set[root] = true;
                int sz = size[root];
                int t = (sz * (sz - 1)) / 2;
                if (eCount[root] == t) {
                    totalCount++;
                }
            }
        }
        return totalCount;
    }
};

class Solution {
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        DS ds(n);
        for (const auto& edge : edges) {
            ds.unionE(edge[0], edge[1]);
        }
        return ds.req();
    }
};

